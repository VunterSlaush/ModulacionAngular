
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import javax.swing.JFrame;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.util.Log;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Slaush
 */
public class ResultScreen extends javax.swing.JFrame {

    private ModulateSignal modulate;
    private Object PHSpinner;
    /**
     * Creates new form ResultScreen
     * @param modulate señal modulada! 
     */
    public ResultScreen(ModulateSignal modulate) 
    {
        initComponents();
        initBoxes();
        initSpinners();
        initCharts();
        initPanels();
        initButtons();
        this.modulate = modulate;
        showGraphics();
        showResultString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moduladaPanel = new javax.swing.JPanel();
        demoduladaPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        okButton = new javax.swing.JButton();
        besselButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        pDSpinner = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        pHSpinner = new javax.swing.JSpinner();
        timeUnidadSpinner = new javax.swing.JComboBox<String>();
        updateButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        calculosMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(0, 648));

        moduladaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafica Señal Modulada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        javax.swing.GroupLayout moduladaPanelLayout = new javax.swing.GroupLayout(moduladaPanel);
        moduladaPanel.setLayout(moduladaPanelLayout);
        moduladaPanelLayout.setHorizontalGroup(
            moduladaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        moduladaPanelLayout.setVerticalGroup(
            moduladaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 176, Short.MAX_VALUE)
        );

        demoduladaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grafica Señal Demodulada", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        javax.swing.GroupLayout demoduladaPanelLayout = new javax.swing.GroupLayout(demoduladaPanel);
        demoduladaPanel.setLayout(demoduladaPanelLayout);
        demoduladaPanelLayout.setHorizontalGroup(
            demoduladaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        demoduladaPanelLayout.setVerticalGroup(
            demoduladaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 176, Short.MAX_VALUE)
        );

        jScrollPane1.setBorder(null);

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        resultTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Valores Importantes", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jScrollPane1.setViewportView(resultTextArea);

        okButton.setText("OK");

        besselButton.setText("Ver Espectros");

        jLabel13.setText("De:");

        jLabel14.setText("Hasta:");

        timeUnidadSpinner.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        updateButton.setText("Actualizar");

        calculosMenu.setText("Calculos Relevantes");
        jMenuBar1.add(calculosMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(113, 113, 113)
                            .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(besselButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(131, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(demoduladaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moduladaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(4, 4, 4)
                        .addComponent(pDSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel14)
                        .addGap(4, 4, 4)
                        .addComponent(pHSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeUnidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addGap(91, 91, 91))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moduladaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(demoduladaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pDSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pHSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(timeUnidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(besselButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private ChartPanel moduladaChart;
    private ChartPanel demoduladaChart;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton besselButton;
    private javax.swing.JMenu calculosMenu;
    private javax.swing.JPanel demoduladaPanel;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel moduladaPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JSpinner pDSpinner;
    private javax.swing.JSpinner pHSpinner;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JComboBox<String> timeUnidadSpinner;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void initPanels() {
     GridLayout gL = new GridLayout();
        gL.setColumns(1);
        gL.setRows(1);

        demoduladaPanel.setLayout(gL);
        demoduladaPanel.setPreferredSize(new Dimension(150,200));
        demoduladaPanel.add(demoduladaChart);
        moduladaPanel.setLayout(gL);
        moduladaPanel.setPreferredSize(new Dimension(150,200));
        moduladaPanel.add(moduladaChart);
    }

    private void initBoxes() {
        ComboBoxManager.getInstance().initTimeBox(timeUnidadSpinner);
        timeUnidadSpinner.setSelectedIndex(2);
        
    }

    private void initCharts() {
        moduladaChart = new ChartPanel(null);
        demoduladaChart = new ChartPanel(null);
    }

    private void initSpinners() {
        pDSpinner.setModel(new SpinnerNumberModel(0,0 ,10000,1));
        pHSpinner.setModel(new SpinnerNumberModel(500,0 ,10000,1));
        pHSpinner.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                //To change body of generated methods, choose Tools | Templates.
                if(e.getUnitsToScroll() < 0)
                    pHSpinner.setValue(pHSpinner.getNextValue());
                else
                {
                    if(pHSpinner.getPreviousValue() != null)
                    pHSpinner.setValue(pHSpinner.getPreviousValue());
                }
                     
            }
        });
        
        pDSpinner.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                 if(e.getUnitsToScroll() < 0)
                    pDSpinner.setValue(pDSpinner.getNextValue());
                 else if(pDSpinner.getPreviousValue()!= null)
                 {
                     pDSpinner.setValue(pDSpinner.getPreviousValue());
                 }
                     
            }
        });
        pDSpinner.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                showGraphics();
            }
        });
        
        pHSpinner.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                showGraphics();
            }
        });
    }

    private void initButtons() {
        updateButton.addActionListener((ActionEvent e) -> {
            showGraphics();
        });
        
        besselButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) 
            {
                
                EspectroForm spectro = new EspectroForm(modulate.getSpectro());
                spectro.setVisible(true);
            }
        });
        
        okButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        calculosMenu.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                CalculosForm c = new CalculosForm(modulate);
                c.setVisible(true);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent e) {
               // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    private void showGraphics() 
    {
        int desde = (int)pDSpinner.getValue();
        int hasta = (int)pHSpinner.getValue();
        if(desde < hasta)
        {
                    String unidadTiempo = (String)this.timeUnidadSpinner.getSelectedItem();
        JFreeChart modulada = GeneradorDeGraphicas.getInstance().drawSignal(modulate,desde,hasta,
                ConversorDeUnidades.getInstance().retornarMultiploUnidad(unidadTiempo));
        moduladaChart.setChart(modulada);
        JFreeChart demodulada = GeneradorDeGraphicas.getInstance().drawSignal(modulate.demodulada(),desde,hasta,ConversorDeUnidades.getInstance().retornarMultiploUnidad(unidadTiempo));
        demoduladaChart.setChart(demodulada);
        }

    }

    private void showResultString() {
        resultTextArea.setEditable(false);
        resultTextArea.setText(modulate.toString());
    }
}
